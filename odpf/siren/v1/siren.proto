syntax = "proto3";
package odpf.siren.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/odpf/proton/siren/v1;sirenv1";
option java_multiple_files = true;
option java_package = "io.odpf.proton.siren";
option java_outer_classname = "ServiceManager";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Siren APIs";
        description: "Documentation of our Siren API with gRPC and\ngRPC-Gateway.";
        version: "0.3.0";
    };
    schemes: HTTP;
};

service SirenService {
    rpc Ping(PingRequest) returns (PingResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "ping";
            tags: "Ping";
        };

        option (google.api.http) = {
            get: "/ping"
        };   
    }

    rpc ListProviders(google.protobuf.Empty) returns (ListProvidersResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list providers";
            tags: "Provider";
        };
        
        option (google.api.http) = {
            get: "/providers"
        };
    }

    rpc CreateProvider(CreateProviderRequest) returns (Provider) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "create a provider";
            tags: "Provider";
        };

        option (google.api.http) = {
            post: "/providers"
            body: "*"
        };
    }

    rpc GetProvider(GetProviderRequest) returns (Provider) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get a provider";
            tags: "Provider";
        };

        option (google.api.http) = {
            get: "/providers/{id}"
        };
    }

    rpc UpdateProvider(UpdateProviderRequest) returns (Provider) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "update a provider";
            tags: "Provider";
        };

        option (google.api.http) = {
            put: "/providers/{id}",
            body: "*"
        };
    }

    rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete a provider";
            tags: "Provider";
        };

        option (google.api.http) = {
            delete: "/providers/{id}"
        };
    }


    rpc ListNamespaces(google.protobuf.Empty) returns (ListNamespacesResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list namespaces";
            tags: "Namespace";
        };

        option (google.api.http) = {
            get: "/namespaces"
        };
    }

    rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "create a namespace";
            tags: "Namespace";
        };

        option (google.api.http) = {
            post: "/namespaces"
            body: "*"
        };
    }

    rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get a namespace";
            tags: "Namespace";
        };

        option (google.api.http) = {
            get: "/namespaces/{id}"
        };
    }

    rpc UpdateNamespace(UpdateNamespaceRequest) returns (Namespace) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "update a namespace";
            tags: "Namespace";
        };

        option (google.api.http) = {
            put: "/namespaces/{id}",
            body: "*"
        };
    }

    rpc DeleteNamespace(DeleteNamespaceRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete a namespace";
            tags: "Namespace";
        };

        option (google.api.http) = {
            delete: "/namespaces/{id}"
        };        
    }

    rpc ListReceivers(google.protobuf.Empty) returns (ListReceiversResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list receivers";
            tags: "Receiver";
        };

        option (google.api.http) = {
            get: "/receivers"
        };
    }

    rpc CreateReceiver(CreateReceiverRequest) returns (Receiver) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "create a receiver";
            tags: "Receiver";
        };
        
        option (google.api.http) = {
            post: "/receivers"
            body: "*"
        };
    }

    rpc GetReceiver(GetReceiverRequest) returns (Receiver) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get a receiver";
            tags: "Receiver";
        };

        option (google.api.http) = {
            get: "/receivers/{id}"
        }; 
    }

    rpc UpdateReceiver(UpdateReceiverRequest) returns (Receiver) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "update a receiver";
            tags: "Receiver";
        };

        option (google.api.http) = {
            put: "/receivers/{id}",
            body: "*"
        };
    }

    rpc DeleteReceiver(DeleteReceiverRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete a receiver";
            tags: "Receiver";
        };

        option (google.api.http) = {
            delete: "/receivers/{id}"
        };
    }

    rpc ListAlertHistory(ListAlertHistoryRequest) returns (ListAlertHistoryResponse) {
        option (google.api.http) = {
            get: "/history"
        };
    }

    rpc CreateAlertHistory(CreateAlertHistoryRequest) returns (CreateAlertHistoryResponse) {
        option (google.api.http) = {
            post: "/history"
            body: "*"
        };
    }

    rpc ListWorkspaceChannels(ListWorkspaceChannelsRequest) returns (ListWorkspaceChannelsResponse) {
        option (google.api.http) = {
            get: "/slackworkspaces/{workspace_name}/channels"
        };
    }
    rpc ExchangeCode(ExchangeCodeRequest) returns (ExchangeCodeResponse) {
        option (google.api.http) = {
            post: "/oauth/slack/token",
            body: "*"
        };
    }
    rpc GetAlertCredentials(GetAlertCredentialsRequest) returns (GetAlertCredentialsResponse) {
        option (google.api.http) = {
            get: "/teams/{team_name}/credentials"
        };
    }

    rpc UpdateAlertCredentials(UpdateAlertCredentialsRequest) returns (UpdateAlertCredentialsResponse) {
        option (google.api.http) = {
            put: "/teams/{team_name}/credentials"
            body: "*"
        };
    }

    rpc SendSlackNotification(SendSlackNotificationRequest) returns (SendSlackNotificationResponse) {
        option (google.api.http) = {
            post: "/notifications"
            body: "*"
        };
    }

    rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list rules";
            tags: "Rule";
        };

        option (google.api.http) = {
            get: "/rules"
        };
    }
    rpc UpdateRule(UpdateRuleRequest) returns (UpdateRuleResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "add/update a rule";
            tags: "Rule";
        };

        option (google.api.http) = {
            put: "/rules"
            body: "*"
        };
    }

    rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list templates";
            tags: "Template";
        };

        option (google.api.http) = {
            get: "/templates"
        };
    }

    rpc GetTemplateByName(GetTemplateByNameRequest) returns (TemplateResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get a template";
            tags: "Template";
        };

        option (google.api.http) = {
            get: "/templates/{name}"
        };
    }

    rpc UpsertTemplate(UpsertTemplateRequest) returns (TemplateResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "add/update a template";
            tags: "Template";
        };

        option (google.api.http) = {
            put: "/templates",
            body: "*"
        };
    }
    rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete a template";
            tags: "Template";
        };

        option (google.api.http) = {
            delete: "/templates/{name}",
        };
    }

    rpc RenderTemplate(RenderTemplateRequest) returns (RenderTemplateResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "render a template";
            tags: "Template";
        };
        
        option (google.api.http) = {
            post: "/templates/{name}/render",
            body: "*"
        };
    }
}

message PingRequest {}

message PingResponse {
    string message = 1;
}

enum Types {
    CORTEX = 0;
}

message Provider {
    uint64 id = 1;
    string host = 2;
    string urn = 3;
    string name = 4;
    string type = 5 [(validate.rules).string = {in: ["cortex"]}];
    google.protobuf.Struct credentials = 6;
    map<string, string> labels = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
}

message ListProvidersResponse {
    repeated Provider providers = 1;
}

message CreateProviderRequest {
    string host = 1 [(validate.rules).string.uri = true];
    string urn = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string name = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string type = 4 [(validate.rules).string = {in: ["cortex"]}];
    google.protobuf.Struct credentials = 5;
    map<string, string> labels = 6;
}

message GetProviderRequest {
    uint64 id = 1;
}

message UpdateProviderRequest {
    uint64 id = 1;
    string host = 2 [(validate.rules).string.uri = true];
    string name = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string type = 4 [(validate.rules).string = {in: ["cortex"]}];
    google.protobuf.Struct credentials = 5;
    map<string, string> labels = 6;
}

message DeleteProviderRequest {
    uint64 id = 1;
}


message Namespace {
    uint64 id = 1;
    string urn = 2;
    string name = 3;
    uint64 provider = 4;
    google.protobuf.Struct credentials = 5;
    map<string, string> labels = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
}

message ListNamespacesResponse {
    repeated Namespace namespaces = 1;
}

message CreateNamespaceRequest {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string urn = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    uint64 provider = 3;
    google.protobuf.Struct credentials = 4;
    map<string, string> labels = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message GetNamespaceRequest {
    uint64 id = 1;
}

message UpdateNamespaceRequest {
    uint64 id = 1;
    string name = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    uint64 provider = 3;
    google.protobuf.Struct credentials = 4;
    map<string, string> labels = 5;
}

message DeleteNamespaceRequest {
    uint64 id = 1;
}

message Receiver {
    uint64 id = 1;
    string name = 2;
    string type = 3 [(validate.rules).string = {in: ["slack", "pagerduty", "http"]}];
    map<string, string> labels = 4;
    google.protobuf.Struct configurations = 5;
    google.protobuf.Struct data = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
}

message ListReceiversResponse {
    repeated Receiver receivers = 1;
}

message CreateReceiverRequest {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_.-]+$"];
    string type = 2 [(validate.rules).string = {in: ["slack", "pagerduty", "http"]}];
    map<string, string> labels = 3;
    google.protobuf.Struct configurations = 4;
}

message GetReceiverRequest {
    uint64 id = 1;
}

message UpdateReceiverRequest {
    uint64 id = 1;
    string name = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_.-]+$"];
    string type = 3 [(validate.rules).string = {in: ["slack", "pagerduty", "http"]}];
    map<string, string> labels = 4;
    google.protobuf.Struct configurations = 5;
}

message DeleteReceiverRequest {
    uint64 id = 1;
}

message ListAlertHistoryRequest {
    string resource = 1;  
    uint32 start_time = 2;
    uint32 end_time = 3;
}

message ListAlertHistoryResponse {
    repeated AlertHistory alerts = 1;
}

message AlertHistory {
    uint64 id = 1;
    string name = 2;
    string template_id = 3;
    string metric_name = 4;
    string metric_value = 5;
    string level = 6;
    string created_at = 7;
    string updated_at = 8;
}

message Annotations {
    string metric_name = 1;
    string metric_value = 2;
    string resource = 3;
    string template = 4;
}

message Labels {
    string severity = 1;
}

message Alert {
    Annotations annotations = 1;
    Labels labels = 2;
    string status = 3;
}

message CreateAlertHistoryRequest {
    repeated Alert alerts = 1;
}

message CreateAlertHistoryResponse {
    repeated AlertHistory alerts = 1;
}

message SlackWorkspace {
    string id = 1;
    string name = 2;
}

message ListWorkspaceChannelsRequest {
    string workspace_name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message ListWorkspaceChannelsResponse {
    repeated SlackWorkspace data = 1;
}

message ExchangeCodeRequest {
    string code = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9._-]+$"];
    string workspace = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message ExchangeCodeResponse {
    bool ok = 1;
}

message GetAlertCredentialsRequest{
    string team_name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message Critical {
    string channel = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message Warning {
    string channel = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message SlackConfig {
    Critical critical = 1 [(validate.rules).message.required = true];
    Warning warning = 2 [(validate.rules).message.required = true];
}

message GetAlertCredentialsResponse {
    string entity = 1;
    string team_name = 2;
    string pagerduty_credentials = 3;
    SlackConfig slack_config = 4;
}

message UpdateAlertCredentialsRequest {
    string entity = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string team_name = 2;
    string pagerduty_credentials = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    SlackConfig slack_config = 4 [(validate.rules).message.required = true];
}
message UpdateAlertCredentialsResponse{}


message SendSlackNotificationRequest{
    string provider = 1;
    string entity = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string message = 3;
    string receiver_name = 4 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string receiver_type = 5 [(validate.rules).string = {in: ["channel", "user"]}];
    repeated google.protobuf.Struct blocks = 6;
}

message SendSlackNotificationResponse {
    bool ok = 1;
}

message ListRulesRequest {
    string name = 1;
    string namespace = 2;
    string group_name = 3;
    string template = 4;
    uint64 provider_namespace = 5;
}

message Variables {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string value = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string type = 3;
    string description = 4;
}

message Rule {
    uint64 id = 1;
    string name = 2;
    bool enabled = 3;
    string group_name = 4;
    string namespace = 5;
    string template = 6;
    repeated Variables variables = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
    uint64 provider_namespace = 10 [(validate.rules).uint64.gte = 0];;
}

message ListRulesResponse {
    repeated Rule rules = 1;
}

message UpdateRuleResponse {
    Rule rule = 1;
}

message UpdateRuleRequest {
    bool enabled = 1;
    string group_name = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string namespace = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string template = 4 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    repeated Variables variables = 5;
    uint64 provider_namespace = 6;
}

message ListTemplatesRequest{
    string tag = 1;
}

message TemplateVariables {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string type = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string default = 3;
    string description = 4;
}

message Template {
    uint64 id = 1;
    string name = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string body = 3 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    repeated string tags = 4 [(validate.rules).repeated.min_items = 1];
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    repeated TemplateVariables variables = 7 [(validate.rules).repeated.min_items = 1];
}

message TemplateResponse {
    Template template = 1;
}

message UpsertTemplateRequest {
    uint64 id = 1;
    string name = 2 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    string body = 3;
    repeated string tags = 4 [(validate.rules).repeated.min_items = 1];
    repeated TemplateVariables variables = 5 [(validate.rules).repeated.min_items = 1];
}

message ListTemplatesResponse {
    repeated Template templates = 1;
}

message GetTemplateByNameRequest {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
}

message DeleteTemplateRequest {
    string name = 1;
}

message DeleteTemplateResponse {}

message RenderTemplateRequest {
    string name = 1 [(validate.rules).string.pattern = "^[A-Za-z0-9_-]+$"];
    map<string, string> variables = 2;
}

message RenderTemplateResponse {
    string body = 1;
}
