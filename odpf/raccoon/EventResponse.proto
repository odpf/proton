syntax = "proto3";

package odpf.raccoon;

option java_multiple_files = true;
option java_package = "io.odpf.proton.raccoon";
option java_outer_classname = "EventResponseProto";

option go_package = "github.com/odpf/proton/raccoon";

/*
 `EventResponse` defines the response contract from Raccoon

 Raccoon sends `EventResponse` for each `EventRequest` received. For WebSocket, 
 `EventResponse` is also used to send the final message in case connection is failed to
 established.
*/

message EventResponse {
  /*
  `status` denotes status of the request.

  Only 3 values are valid. `SUCCESS` means the the request is processed
  successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS` 
  means Raccoon unable to determine whether the request is success or not.
  */
  Status status = 1;
  /*
  `code` gives more detail of what happened to the request.

  Details of available `code` can be seen below.
  */
  Code code = 2;
  /*
  `sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
  */
  int64 sent_time = 3;
  /*
  `reason` is additional-human readable information to provide more context to `status` and `code`.

  There is no predefined structure for this. The value is arbitrary.
  */
  string reason = 4;
  /*
  `data` is arbitrary extra metadata.
  
  Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
  of `data`. The client may fetch req_guid as key to get the `req_guid` value.
  */
  map<string, string> data = 5;
}

enum Status {
    UNKNOWN_STATUS = 0;
    SUCCESS = 1;
    ERROR = 2;
}

enum Code {
    /*
    `UNQKNOWN_CODE` indicates no appropriate/existing code can describe it.
    */
    UNKNOWN_CODE = 0;
    /*
    `OK` indicates the request is processed successfully.
    */
    OK = 1;
    /*
    `BAD_REQUEST` indicates there is something wrong with the request.
    */
    BAD_REQUEST = 2;
    /*
    `INTERNAL_ERROR` indicates that Raccoon encountered an unexpected condition that prevented it from fulfilling the request.
    */
    INTERNAL_ERROR = 3;
    /*
    `MAX_CONNECTION_LIMIT_REACHED` indicates that Raccoon is unable to accepts new connection due to max connection is reached.

    To prevent Raccoon from eating up resources, connection limit needs to be set. The limit is configurable on Raccoon by setting `SERVER_WEBSOCKET_MAX_CONN`
    */
    MAX_CONNECTION_LIMIT_REACHED = 4;
    /*
    `MAX_USER_LIMIT_REACHED` indicates that existing connection with the same ID.

    Raccoon ensures unique connection using unique identifier passed from the header 
    the first time Websocket connection is established. The header key that
    contains unique identifier is configurable on Raccoon by setting `SERVER_WEBSOCKET_CONN_UNIQ_ID_HEADER`
    */
    MAX_USER_LIMIT_REACHED = 5;
}
