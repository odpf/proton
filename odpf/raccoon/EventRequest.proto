syntax = "proto3";

package odpf.raccoon;

option java_multiple_files = true;
option java_package = "io.odpf.proton.raccoon";
option java_outer_classname = "EventRequestProto";

import "odpf/raccoon/Event.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/odpf/proton/raccoon";

/*
 `EventRequest` defines the contract to push events to Raccoon

 An `EventRequest` allows you to push more than one events(batch). The events
 are wrapped inside `events` repeated field. All of the fields on `EventRequest`
 are required.
*/
message EventRequest {
  /*
  `req_guid` is unique identifier of the request the client is making.

  Raccoon uses the identifier to send response of the request. The client can handle the
  response accordingly. For example, the client can retry the request in case the response is
  giving `INTERNAL_ERROR` code with "publisher failed" reason.

  This identifier is necessary because on event-based protocols like WebSocket the response is
  returned asynchronously. If there is no identifier, no way the client can tell which response
  belongs to which request.

  Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the 
  debug logs with `ReqGUID` keyword.
  */ 
  string req_guid = 1;
  /*
  `sent_time` defines the time the request is sent.

  `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
  request is sent until the events are published.
  */
  google.protobuf.Timestamp sent_time = 2;
  /*
  `events` is where the client put all the events wrapped in `Event`.

  As mentioned above, the request allows the client to push more than one event. Normally you want to batch
  the events to optimize the network call. 
  */
  repeated Event events = 3;
}