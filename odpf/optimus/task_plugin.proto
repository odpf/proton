syntax = "proto3";
package odpf.optimus;

option go_package = "github.com/odpf/proton/optimus";
option java_multiple_files = true;
option java_package = "io.odpf.proton.optimus";
option java_outer_classname = "TaskPluginManager";

import "odpf/optimus/runtime_service.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// TaskPlugin must be implemented on a GRPC server for plugins
service TaskPlugin {
    // GetTaskSchema provides basic working details for this task
    rpc GetTaskSchema(GetTaskSchema.Request) returns (GetTaskSchema.Response);

    // GetTaskQuestions list down all the cli inputs required to generate spec files
    // name used for question will be directly mapped to DefaultTaskConfig() parameters
    rpc GetTaskQuestions(GetTaskQuestions.Request) returns (GetTaskQuestions.Response);
    rpc ValidateTaskQuestion(ValidateTaskQuestion.Request) returns (ValidateTaskQuestion.Response);


    // DefaultTaskConfig are a set of configuration which will be embedded in job
    // specification. These configs can be requested by the docker container before
    // execution
    // they will be generated based on results of GetTaskQuestions
    // if DryRun is true in PluginOptions, should not throw error for missing inputs
    rpc DefaultTaskConfig(DefaultTaskConfig.Request) returns (DefaultTaskConfig.Response);
    // DefaultTaskAssets are a set of files which will be embedded in job
    // specification in assets folder. These configs can be requested by the
    // docker container before execution.
    // if DryRun is true in PluginOptions, should not throw error for missing inputs
    rpc DefaultTaskAssets(DefaultTaskAssets.Request) returns (DefaultTaskAssets.Response);
    // CompileTaskAssets overrides the default asset compilation behaviour
    rpc CompileTaskAssets(CompileTaskAssets.Request) returns (CompileTaskAssets.Response);

    // GenerateTaskDestination derive destination from config and assets
    rpc GenerateTaskDestination(GenerateTaskDestination.Request) returns (GenerateTaskDestination.Response);

    // GenerateTaskDependencies returns names of job destination on which this unit
    // is dependent on
    rpc GenerateTaskDependencies(GenerateTaskDependencies.Request) returns (GenerateTaskDependencies.Response);
}

message PluginOptions {
    bool dry_run = 1;
}

message GetTaskSchema {
    message Request {}
    message Response {
        string name = 1;
        string description = 2;
        string image = 3;

        // secret_path will be mounted inside the container as volume
        // e.g. /opt/secret/auth.json
        string secret_path = 4;
    }
}

message PluginQuestion {
    reserved 6, 7;

    string name = 1;
    string prompt = 2;
    string help = 3;
    string default = 4;
    repeated string multiselect = 5;

    message SubQuestion {
        string if_value = 1;
        repeated PluginQuestion questions = 2;
    }
    repeated SubQuestion sub_questions = 8;
}

message PluginAnswer {
    PluginQuestion question = 1;
    string value = 2;
}

message GetTaskQuestions {
    message Request {
        string job_name = 1;
        PluginOptions options = 40;
    }
    message Response {
        repeated PluginQuestion questions = 1;
    }
}

message ValidateTaskQuestion {
    message Request {
        PluginAnswer answer = 1;

        PluginOptions options = 40;
    }
    message Response {
        bool success = 1;
        string error = 2;
    }
}

message TaskConfigs {
    message Config {
        string name = 1;
        string value = 2;
    }
    repeated Config configs = 1;
}

message DefaultTaskConfig {
    message Request {
        repeated PluginAnswer answers = 1;

        PluginOptions options = 40;
    }
    message Response {
        TaskConfigs configs = 1;
    }
}

message TaskAssets {
    message Asset {
        string name = 1;
        string value = 2;
    }
    repeated Asset assets = 1;
}

message DefaultTaskAssets {
    message Request {
        repeated PluginAnswer answers = 1;

        PluginOptions options = 40;
    }
    message Response {
        TaskAssets assets = 1;
    }
}

message TaskWindow {
    google.protobuf.Duration size = 1;
    google.protobuf.Duration offset = 2;
    string truncate_to = 3;
}

message CompileTaskAssets {
    message Request {
        TaskConfigs job_configs = 1;
        TaskAssets job_assets = 2;
        TaskWindow task_window = 3;
        google.protobuf.Timestamp instance_schedule = 4;
        repeated InstanceSpecData instance_data = 5;

        PluginOptions options = 40;
    }
    message Response {
        TaskAssets assets = 1;
    }
}

message GenerateTaskDestination {
    message Request {
        // Task configs
        TaskConfigs job_config = 1;
        // Job assets
        TaskAssets job_assets = 2;
        // Job project
        ProjectSpecification project = 3;

        PluginOptions options = 40;
    }
    message Response {
        string destination = 1;
    }
}

message GenerateTaskDependencies {
    message Request {
        // Task configs
        TaskConfigs job_config = 1;
        // Job assets
        TaskAssets job_assets = 2;
        // Job project
        ProjectSpecification project = 3;

        PluginOptions options = 40;
    }
    message Response {
        repeated string dependencies = 1;
    }
}